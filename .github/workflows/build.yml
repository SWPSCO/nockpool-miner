name: Miner build and release

permissions:
  contents: write

on:
  push:
    branches: [main, staging]
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      build_linux:
        description: 'Build Linux binary'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS binary'
        required: false
        default: true
        type: boolean
      build_docker:
        description: 'Build Docker image'
        required: false
        default: true
        type: boolean
      enable_slsa:
        description: 'Generate SLSA provenance (requires public repo)'
        required: false
        default: false
        type: boolean
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  vars:
    runs-on: ubuntu-24.04
    outputs:
      short_sha: ${{ steps.set.outputs.short_sha }}
      version: ${{ steps.set.outputs.version }}
    steps:
      - uses: actions/checkout@v4
      - name: set short git commit sha
        id: set
        run: |
          calculatedSha=$(git rev-parse HEAD | cut -c1-7)
          echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT
          ref_name="${{ github.ref_name }}"
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            echo "version=${ref_name#v}" >> $GITHUB_OUTPUT
          fi

  build-linux-x64:
    needs: vars
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && (inputs.build_linux || inputs.build_docker))
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-unknown-linux-gnu

      - name: Install glibc static dev libs
        run: |
          sudo apt-get update
          sudo apt-get install -y libc6-dev
      
      - name: Build miner
        env:
          RUSTFLAGS: "-A warnings -C target-feature=+crt-static"
        run: |
          cargo build --target x86_64-unknown-linux-gnu --release

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts-x64
          path: target/x86_64-unknown-linux-gnu/release/nockpool-miner

  build-macos:
    needs: vars
    runs-on: [self-hosted, macOS, ARM64]
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.build_macos)
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: aarch64-apple-darwin
      
      - name: Build miner
        env:
          RUSTFLAGS: "-A warnings"
        run: |
          cargo build --target aarch64-apple-darwin --release

      - name: import certs
        env:
          APPLE_P12: ${{ secrets.APPLE_P12 }}
          APPLE_P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          APPLE_INSTALLER_P12: ${{ secrets.APPLE_INSTALLER_P12 }} 
          APPLE_INSTALLER_P12_PASSWORD: ${{ secrets.APPLE_INSTALLER_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_P12 | base64 --decode > cert.p12
          
          KEYCHAIN_NAME="build-${{ github.run_id }}.keychain"
          
          security delete-keychain $KEYCHAIN_NAME 2>/dev/null || true
          
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          security list-keychains -d user -s $KEYCHAIN_NAME $(security list-keychains -d user | sed s/\"//g)
          security set-keychain-settings -t 3600 -l $KEYCHAIN_NAME
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          
          security import cert.p12 -k $KEYCHAIN_NAME -P $APPLE_P12_PASSWORD -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple:,codesign:,security: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          
          security default-keychain -s $KEYCHAIN_NAME
          
          rm cert.p12
          
          echo $APPLE_INSTALLER_P12 | base64 --decode > installer.p12
          security import installer.p12 -k $KEYCHAIN_NAME \
            -P $APPLE_INSTALLER_P12_PASSWORD \
            -T /usr/bin/productsign -T /usr/bin/security
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign:,security: \
            -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          rm installer.p12
          
          echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> $GITHUB_ENV

      - name: codesign binary
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          
          cat > "Entitlements.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-executable-page-protection</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          codesign --force --options runtime --entitlements ./Entitlements.plist --timestamp \
            --sign "Developer ID Application: Southwestern Pool Supply CO INC (484J85QW9N)" \
            --identifier "io.swps.nockpool-miner" \
            --keychain $KEYCHAIN_NAME \
            target/aarch64-apple-darwin/release/nockpool-miner

      - name: notarize binary
        env:
          AC_API_KEY_ID:     ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID:  ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY_PATH:   ${{ secrets.AC_API_KEY_PATH }}
          TEAM_ID:           484J85QW9N
        run: |
          echo $AC_API_KEY_PATH | base64 --decode > key.p8
          ditto -c -k --sequesterRsrc --keepParent \
            target/aarch64-apple-darwin/release/nockpool-miner nockpool-miner.zip
          xcrun notarytool submit nockpool-miner.zip \
            --key key.p8 --key-id $AC_API_KEY_ID \
            --issuer $AC_API_ISSUER_ID --team-id $TEAM_ID --wait
          
          staple_success=false
          for i in {1..5}; do
            echo "Attempting to staple binary (attempt $i)..."
            if xcrun stapler staple target/aarch64-apple-darwin/release/nockpool-miner; then
              echo "Binary stapling successful."
              staple_success=true
              break
            fi
            if [ $i -lt 5 ]; then
              echo "Stapling failed, retrying in 30 seconds..."
              sleep 30
            fi
          done

          if [ "$staple_success" != "true" ]; then
            echo "Binary stapling failed after multiple attempts."
            exit 1
          fi
          
          rm nockpool-miner.zip key.p8

      - name: build & notarize installer pkg
        env:
          AC_API_KEY_ID:     ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID:  ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY_PATH:   ${{ secrets.AC_API_KEY_PATH }}
          TEAM_ID:           484J85QW9N
        run: |
          echo $AC_API_KEY_PATH | base64 --decode > key.p8
          wget -qO logo_1024.png https://bin.aeroe.io/nclogo_1024.png
          mkdir icon.iconset
          for s in 16 32 64 128 256 512 1024; do
            sips -z $s $s logo_1024.png --out icon.iconset/icon_${s}x${s}.png
          done
          iconutil -c icns icon.iconset -o icon.icns
          rm -rf icon.iconset logo_1024.png
          
          mkdir -p dist pkgroot
          rm -rf pkgroot
          mkdir -p \
            pkgroot/usr/local/bin \
            "pkgroot/Applications/nockpool-miner Installer.app/Contents/MacOS" \
            "pkgroot/Applications/nockpool-miner Installer.app/Contents/Resources"
          cp target/aarch64-apple-darwin/release/nockpool-miner pkgroot/usr/local/bin/
          cp icon.icns "pkgroot/Applications/nockpool-miner Installer.app/Contents/Resources/"
          cat > "pkgroot/Applications/nockpool-miner Installer.app/Contents/MacOS/install" <<EOF
          #!/usr/bin/env bash
          osascript -e 'tell application "Terminal" to do script "miner --help"'
          EOF
          chmod +x "pkgroot/Applications/nockpool-miner Installer.app/Contents/MacOS/install"
          
          cat > "pkgroot/Applications/nockpool-miner Installer.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>CFBundleName</key><string>nockpool-miner Installer</string>
            <key>CFBundleExecutable</key><string>install</string>
            <key>CFBundleIconFile</key><string>icon.icns</string>
            <key>CFBundlePackageType</key><string>APPL</string>
          </dict></plist>
          EOF
          
          pkgbuild --root pkgroot \
                   --identifier io.swps.nockpool-miner.pkg \
                   --version ${{ needs.vars.outputs.version || needs.vars.outputs.short_sha }} \
                   --install-location / \
                   nockpool-miner-unsigned.pkg
          productsign --sign "Developer ID Installer: Southwestern Pool Supply CO INC (484J85QW9N)" \
                      nockpool-miner-unsigned.pkg "dist/nockpool-miner.pkg"
          xcrun notarytool submit "dist/nockpool-miner.pkg" \
               --key key.p8 --key-id $AC_API_KEY_ID \
               --issuer $AC_API_ISSUER_ID --team-id $TEAM_ID --wait
          
          staple_success=false
          for i in {1..5}; do
            echo "Attempting to staple pkg (attempt $i)..."
            if xcrun stapler staple "dist/nockpool-miner.pkg"; then
              echo "Pkg stapling successful."
              staple_success=true
              break
            fi
            if [ $i -lt 5 ]; then
              echo "Stapling failed, retrying in 30 seconds..."
              sleep 30
            fi
          done
          
          if [ "$staple_success" != "true" ]; then
            echo "Pkg stapling failed after multiple attempts."
            exit 1
          fi
          
          rm -rf key.p8 pkgroot icon.icns

      - uses: actions/upload-artifact@v4
        with:
          name: mac-installer
          path: dist/*.pkg

      - uses: actions/upload-artifact@v4
        with:
          name: mac-binary
          path: target/aarch66-apple-darwin/release/nockpool-miner

  build-docker:
    needs: [vars, build-linux-x64]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'workflow_dispatch' && inputs.build_docker)
    outputs:
      image_digest: ${{ steps.build.outputs.digest }}
      image_name: ${{ steps.meta.outputs.tags }}
    steps:
      - uses: actions/checkout@v4

      - name: Download Linux binary
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts-x64
          path: ./linux_x64
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Dockerhub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: swpsco/nockpool-miner
          tags: |
            type=raw,value=latest
            type=raw,value=${{ needs.vars.outputs.short_sha }}
            type=raw,value=${{ needs.vars.outputs.version }},enable=${{ needs.vars.outputs.version != '' }}
          
      - name: Create Dockerfile
        run: |
          cat << 'EOF' > Dockerfile
          FROM ubuntu:24.04
          WORKDIR /nockpool
          RUN apt-get update && apt-get install -y ca-certificates && rm -rf /var/lib/apt/lists/*
          COPY linux_x64/nockpool-miner /usr/local/bin/nockpool-miner
          RUN chmod +x /usr/local/bin/nockpool-miner
          ENTRYPOINT ["nockpool-miner", "--help"]
          EOF
          
      - name: Build and push
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          no-cache: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Extract ECR metadata
        id: meta-ecr
        uses: docker/metadata-action@v5
        with:
          images: 990148762097.dkr.ecr.us-east-2.amazonaws.com/nockpool/miner
          tags: |
            type=raw,value=dev-latest
            type=raw,value=dev-${{ needs.vars.outputs.short_sha }}
            type=raw,value=dev-${{ needs.vars.outputs.version }},enable=${{ needs.vars.outputs.version != '' }}
      
      - name: Build and push to ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta-ecr.outputs.tags }}
          labels: ${{ steps.meta-ecr.outputs.labels }}
          no-cache: true

  package:
    needs: [build-linux-x64, build-macos, build-docker]
    runs-on: ubuntu-latest
    if: always() && !failure() && !cancelled()
    outputs:
      content_hashes: ${{ steps.content-hash.outputs.content_hashes }}
      docker_built: ${{ needs.build-docker.result == 'success' }}
    steps:
      - name: Download Linux artifacts
        if: needs.build-linux-x64.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts-x64
          path: ./linux_x64
      - name: Download macOS artifacts
        if: needs.build-macos.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: mac-installer
          path: ./mac
      - name: Download macOS binary artifact
        if: needs.build-macos.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: mac-binary
          path: ./mac-bin
      - name: make release assets
        run: |
          mkdir -p out
          if [ -f "linux_x64/nockpool-miner" ]; then
            cp linux_x64/nockpool-miner out/nockpool-miner-linux-x86_64
            chmod +x out/nockpool-miner-linux-x86_64
          fi
          if [ -f "mac/nockpool-miner.pkg" ]; then
            cp mac/nockpool-miner.pkg out/nockpool-miner-macos-aarch64.pkg
          fi
          if [ -f "mac-bin/nockpool-miner" ]; then
            cp mac-bin/nockpool-miner out/nockpool-miner-macos-aarch64
            chmod +x out/nockpool-miner-macos-aarch64
          fi
      - name: compute content hashes
        id: content-hash
        run: |
          files=$(find out/ -type f)
          if [ -n "$files" ]; then
            echo "content_hashes=$(sha256sum $files | base64 -w0)" >> $GITHUB_OUTPUT
          else
            echo "content_hashes=" >> $GITHUB_OUTPUT
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-artifacts
          path: out/*

  provenance:
    needs: package
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.1.0
    permissions:
      actions: read
      id-token: write
      contents: write
    with:
      base64-subjects: ${{ needs.package.outputs.content_hashes }}
      upload-assets: false
    if: |
      needs.package.outputs.content_hashes != '' &&
      github.event_name == 'workflow_dispatch' && 
      inputs.enable_slsa == true

  create-release:
    runs-on: ubuntu-latest
    needs: [vars, package, provenance]
    if: |
      always() && !failure() && !cancelled() &&
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) ||
      (github.event_name == 'workflow_dispatch' && inputs.create_release)
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: packaged-artifacts
        path: release-assets

    - name: download provenance
      if: github.event_name == 'workflow_dispatch' && inputs.enable_slsa == true
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.provenance.outputs.provenance-name }}
        path: ./prov
        
    - name: Generate release notes and latest.json
      id: release_notes
      run: |
        SHORT_SHA=${{ needs.vars.outputs.short_sha }}
        VERSION=${{ needs.vars.outputs.version }}
        TAG_NAME=${{ github.ref_name }}
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
        
        LINUX_BUILT="false"
        MACOS_BUILT="false"
        DOCKER_BUILT="false"
        LINUX_URL=""
        MACOS_URL=""
        LINUX_SHA256=""
        MACOS_SHA256=""
        MACOS_BIN_URL=""
        MACOS_BIN_SHA256=""

        if [ -f "release-assets/nockpool-miner-linux-x86_64" ]; then
          LINUX_BUILT="true"
          LINUX_URL="https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/nockpool-miner-linux-x86_64"
          LINUX_SHA256=$(sha256sum release-assets/nockpool-miner-linux-x86_64 | awk '{print $1}')
        fi
        if [ -f "release-assets/nockpool-miner-macos-aarch64.pkg" ]; then
          MACOS_BUILT="true"
          MACOS_URL="https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/nockpool-miner-macos-aarch64.pkg"
          MACOS_SHA256=$(sha256sum release-assets/nockpool-miner-macos-aarch64.pkg | awk '{print $1}')
        fi
        if [ -f "release-assets/nockpool-miner-macos-aarch64" ]; then
          MACOS_BUILT="true"
          MACOS_BIN_URL="https://github.com/${{ github.repository }}/releases/download/$TAG_NAME/nockpool-miner-macos-aarch64"
          MACOS_BIN_SHA256=$(sha256sum release-assets/nockpool-miner-macos-aarch64 | awk '{print $1}')
        fi
        if [ "${{ needs.package.outputs.docker_built }}" = "true" ]; then
          DOCKER_BUILT="true"
        fi
        
        cat > release-notes.md << EOF
        ## nockpool-miner Release $VERSION
        
        Built from commit \`$SHORT_SHA\`
        EOF
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ inputs.enable_slsa }}" = "true" ]; then
          cat >> release-notes.md << EOF
        
        ### Verification
        
        All artifacts have [SLSA level 3](https://github.blog/security/supply-chain-security/slsa-3-compliance-with-github-actions/) provenance attestation.
        
        **How to verify:**
        - Get the slsa3-verifier for your platform: https://github.com/slsa-framework/slsa-verifier
        - Download the \`multiple.intoto.jsonl\` file from this release
        - Run: \`slsa-verifier-linux-amd64 verify-artifact nockpool-miner-linux-x86_64 --provenance-path multiple.intoto.jsonl --source-uri=git+https://github.com/${{ github.repository }}\`
        EOF
        fi
        
        cat >> release-notes.md << EOF
        
        ### Changes
        $(git log --oneline -10 --pretty=format:"- %s" HEAD || echo "- Latest changes")
        
        ### Binaries
        EOF
        
        if [ $LINUX_BUILT = "true" ]; then
          echo "- **nockpool-miner-linux-x86_64**: nockpool miner for Linux x86_64 (glibc)" >> release-notes.md
        fi
        if [ $MACOS_BUILT = "true" ]; then
          echo "- **nockpool-miner-macos-aarch64**: signed and notarized binary for macOS Apple Silicon" >> release-notes.md
          echo "- **nockpool-miner-macos-aarch64.pkg**: signed and notarized installer for macOS Apple Silicon" >> release-notes.md
          echo "" >> release-notes.md
          echo "### MacOS Installation" >> release-notes.md
          echo "Download the .pkg file and double-click to install. The binary will be installed to /usr/local/bin/nockpool-miner." >> release-notes.md
        fi
        if [ $DOCKER_BUILT = "true" ]; then
          echo "" >> release-notes.md
          echo "### Docker Image" >> release-notes.md
          echo "- **swpsco/nockpool-miner:latest** and **swpsco/nockpool-miner:$VERSION**" >> release-notes.md
          echo "" >> release-notes.md
          echo "\`\`\`bash" >> release-notes.md
          echo "docker pull swpsco/nockpool-miner:$VERSION" >> release-notes.md
          echo "docker run swpsco/nockpool-miner:$VERSION" >> release-notes.md
          echo "\`\`\`" >> release-notes.md
        fi

        # Create latest.json
        echo "{" > release-assets/latest.json
        echo "  \"version\": \"$VERSION\"," >> release-assets/latest.json
        echo "  \"tag_name\": \"$TAG_NAME\"," >> release-assets/latest.json
        echo "  \"release_url\": \"https://github.com/${{ github.repository }}/releases/tag/$TAG_NAME\"," >> release-assets/latest.json
        echo "  \"assets\": {" >> release-assets/latest.json
        
        ASSET_ENTRIES=()
        if [ "$LINUX_BUILT" = "true" ]; then
          ASSET_ENTRIES+=("    \"linux_x86_64\": {\"url\": \"$LINUX_URL\", \"sha256\": \"$LINUX_SHA256\"}")
        fi
        if [ "$MACOS_BUILT" = "true" ]; then
          ASSET_ENTRIES+=("    \"macos_aarch64_pkg\": {\"url\": \"$MACOS_URL\", \"sha256\": \"$MACOS_SHA256\"}")
          ASSET_ENTRIES+=("    \"macos_aarch64_binary\": {\"url\": \"$MACOS_BIN_URL\", \"sha256\": \"$MACOS_BIN_SHA256\"}")
        fi
        
        # Join with comma
        JOINED_ASSETS=$(IFS=,; echo "${ASSET_ENTRIES[*]}")
        echo "$JOINED_ASSETS" >> release-assets/latest.json

        echo "  }," >> release-assets/latest.json
        echo "  \"docker\": {" >> release-assets/latest.json
        echo "    \"hub\": \"swpsco/nockpool-miner:$VERSION\"," >> release-assets/latest.json
        echo "    \"ecr\": \"990148762097.dkr.ecr.us-east-2.amazonaws.com/nockpool/miner:dev-$VERSION\"" >> release-assets/latest.json
        echo "  }" >> release-assets/latest.json
        echo "}" >> release-assets/latest.json
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_notes.outputs.tag_name }}
        name: nockpool-miner v${{ steps.release_notes.outputs.version }}
        body_path: release-notes.md
        files: |
          release-assets/*
          ${{ github.event_name == 'workflow_dispatch' && inputs.enable_slsa == true && format('prov/{0}', needs.provenance.outputs.provenance-name) || '' }}
        draft: false
        prerelease: ${{ github.ref_type != 'tag' }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

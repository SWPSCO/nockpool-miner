name: Miner build and release

permissions:
  contents: write

on:
  push:
    branches: [main, staging]
  workflow_dispatch:
    inputs:
      build_linux:
        description: 'Build Linux binary'
        required: false
        default: true
        type: boolean
      build_macos:
        description: 'Build macOS binary'
        required: false
        default: true
        type: boolean
      create_release:
        description: 'Create GitHub release'
        required: false
        default: false
        type: boolean

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  vars:
    runs-on: ubuntu-latest
    outputs:
      short_sha: ${{ steps.set.outputs.short_sha }}
    steps:
      - uses: actions/checkout@v4
      - name: set short git commit sha
        id: set
        run: |
          calculatedSha=$(git rev-parse HEAD | cut -c1-7)
          echo "short_sha=$calculatedSha" >> $GITHUB_OUTPUT

  build-linux-x64:
    needs: vars
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.build_linux)
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: x86_64-unknown-linux-musl
      
      - name: Install Linux dependencies
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt update && sudo apt install -y musl-tools musl-dev build-essential
      
      - name: Build miner
        env:
          RUSTFLAGS: "-A warnings"
        run: |
          cargo build --target x86_64-unknown-linux-musl --release --bin miner

      - name: Upload binary as artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifacts-x64
          path: target/x86_64-unknown-linux-musl/release/miner

  build-macos:
    needs: vars
    runs-on: [self-hosted, macOS, ARM64]
    if: |
      (github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && inputs.build_macos)
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: nightly
          target: aarch64-apple-darwin
      
      - name: Build miner
        env:
          RUSTFLAGS: "-A warnings"
        run: |
          cargo build --target aarch64-apple-darwin --release --bin miner

      - name: import certs
        env:
          APPLE_P12: ${{ secrets.APPLE_P12 }}
          APPLE_P12_PASSWORD: ${{ secrets.APPLE_P12_PASSWORD }}
          APPLE_INSTALLER_P12: ${{ secrets.APPLE_INSTALLER_P12 }} 
          APPLE_INSTALLER_P12_PASSWORD: ${{ secrets.APPLE_INSTALLER_P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          echo $APPLE_P12 | base64 --decode > cert.p12
          
          KEYCHAIN_NAME="build-${{ github.run_id }}.keychain"
          
          security delete-keychain $KEYCHAIN_NAME 2>/dev/null || true
          
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          security list-keychains -d user -s $KEYCHAIN_NAME $(security list-keychains -d user | sed s/\"//g)
          security set-keychain-settings -t 3600 -l $KEYCHAIN_NAME
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          
          security import cert.p12 -k $KEYCHAIN_NAME -P $APPLE_P12_PASSWORD -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple:,codesign:,security: -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          
          security default-keychain -s $KEYCHAIN_NAME
          
          rm cert.p12
          
          echo $APPLE_INSTALLER_P12 | base64 --decode > installer.p12
          security import installer.p12 -k $KEYCHAIN_NAME \
            -P $APPLE_INSTALLER_P12_PASSWORD \
            -T /usr/bin/productsign -T /usr/bin/security
          security set-key-partition-list \
            -S apple-tool:,apple:,codesign:,security: \
            -s -k $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          rm installer.p12
          
          echo "KEYCHAIN_NAME=$KEYCHAIN_NAME" >> $GITHUB_ENV

      - name: codesign binary
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_NAME
          
          cat > "Entitlements.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
              <key>com.apple.security.cs.allow-jit</key>
              <true/>
              <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
              <true/>
              <key>com.apple.security.cs.disable-executable-page-protection</key>
              <true/>
              <key>com.apple.security.cs.allow-dyld-environment-variables</key>
              <true/>
          </dict>
          </plist>
          EOF
          
          codesign --force --options runtime --entitlements ./Entitlements.plist --timestamp \
            --sign "Developer ID Application: Southwestern Pool Supply CO INC (484J85QW9N)" \
            --keychain $KEYCHAIN_NAME \
            target/aarch64-apple-darwin/release/miner

      - name: build & notarize installer pkg
        env:
          AC_API_KEY_ID:     ${{ secrets.AC_API_KEY_ID }}
          AC_API_ISSUER_ID:  ${{ secrets.AC_API_ISSUER_ID }}
          AC_API_KEY_PATH:   ${{ secrets.AC_API_KEY_PATH }}
          TEAM_ID:           484J85QW9N
        run: |
          echo $AC_API_KEY_PATH | base64 --decode > key.p8
          wget -qO logo_1024.png https://bin.aeroe.io/nclogo_1024.png
          mkdir icon.iconset
          for s in 16 32 64 128 256 512 1024; do
            sips -z $s $s logo_1024.png --out icon.iconset/icon_${s}x${s}.png
          done
          iconutil -c icns icon.iconset -o icon.icns
          rm -rf icon.iconset logo_1024.png
          
          mkdir -p dist pkgroot
          rm -rf pkgroot
          mkdir -p \
            pkgroot/usr/local/bin \
            "pkgroot/Applications/miner Installer.app/Contents/MacOS" \
            "pkgroot/Applications/miner Installer.app/Contents/Resources"
          cp target/aarch64-apple-darwin/release/miner pkgroot/usr/local/bin/
          cp icon.icns "pkgroot/Applications/miner Installer.app/Contents/Resources/"
          cat > "pkgroot/Applications/miner Installer.app/Contents/MacOS/install" <<EOF
          #!/usr/bin/env bash
          osascript -e 'tell application "Terminal" to do script "miner --help"'
          EOF
          chmod +x "pkgroot/Applications/miner Installer.app/Contents/MacOS/install"
          
          cat > "pkgroot/Applications/miner Installer.app/Contents/Info.plist" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0"><dict>
            <key>CFBundleName</key><string>miner Installer</string>
            <key>CFBundleExecutable</key><string>install</string>
            <key>CFBundleIconFile</key><string>icon.icns</string>
            <key>CFBundlePackageType</key><string>APPL</string>
          </dict></plist>
          EOF
          
          pkgbuild --root pkgroot \
                   --identifier io.swps.nockpool.pkg \
                   --version ${{ needs.vars.outputs.short_sha }} \
                   --install-location / \
                   nockpool-unsigned.pkg
          productsign --sign "Developer ID Installer: Southwestern Pool Supply CO INC (484J85QW9N)" \
                      nockpool-unsigned.pkg "dist/nockpool.pkg"
          xcrun notarytool submit "dist/nockpool.pkg" \
               --key key.p8 --key-id $AC_API_KEY_ID \
               --issuer $AC_API_ISSUER_ID --team-id $TEAM_ID --wait
          xcrun stapler staple "dist/nockpool.pkg"
          
          rm -rf key.p8 pkgroot icon.icns

      - uses: actions/upload-artifact@v4
        with:
          name: mac-installer
          path: dist/*.pkg

  package:
    needs: [build-linux-x64, build-macos]
    runs-on: ubuntu-latest
    if: always() && !failure() && !cancelled()
    steps:
      - name: Download Linux artifacts
        if: needs.build-linux-x64.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: linux-artifacts-x64
          path: ./linux_x64
      - name: Download macOS artifacts
        if: needs.build-macos.result == 'success'
        uses: actions/download-artifact@v4
        with:
          name: mac-installer
          path: ./mac
      - name: make release assets
        run: |
          mkdir -p out
          if [ -f "linux_x64/miner" ]; then
            cp linux_x64/miner out/nockpool-miner-linux-x86_64
            chmod +x out/nockpool-miner-linux-x86_64
          fi
          if [ -f "mac/nockpool.pkg" ]; then
            cp mac/nockpool.pkg out/nockpool-miner-macos-aarch64.pkg
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: packaged-artifacts
          path: out/*

  create-release:
    runs-on: ubuntu-latest
    needs: [vars, package]
    if: |
      always() && !failure() && !cancelled() &&
      ((github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging')) ||
       (github.event_name == 'workflow_dispatch' && inputs.create_release))
    
    steps:
    - uses: actions/checkout@v4
      
    - name: Download release artifacts
      uses: actions/download-artifact@v4
      with:
        name: packaged-artifacts
        path: release-assets
        
    - name: Generate release notes
      id: release_notes
      run: |
        SHORT_SHA=${{ needs.vars.outputs.short_sha }}
        echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT
        
        # Check what was built
        LINUX_BUILT="false"
        MACOS_BUILT="false"
        if [ -f "release-assets/nockpool-miner-linux-x86_64" ]; then
          LINUX_BUILT="true"
        fi
        if [ -f "release-assets/nockpool-miner-macos-aarch64.pkg" ]; then
          MACOS_BUILT="true"
        fi
        
        cat > release-notes.md << EOF
        ## Miner Release $SHORT_SHA
        
        Built from commit \`$SHORT_SHA\`
        
        ### Changes
        $(git log --oneline -10 --pretty=format:"- %s" HEAD || echo "- Latest changes")
        
        ### Binaries
        EOF
        
        if [ $LINUX_BUILT = "true" ]; then
          echo "- **nockpool-miner-linux-x86_64**: nockpool miner for Linux x86_64 (musl static)" >> release-notes.md
        fi
        if [ $MACOS_BUILT = "true" ]; then
          echo "- **nockpool-miner-macos-aarch64.pkg**: signed and notarized installer for macOS Apple Silicon" >> release-notes.md
          echo "" >> release-notes.md
          echo "### MacOS Installation" >> release-notes.md
          echo "Download the .pkg file and double-click to install. The binary will be installed to /usr/local/bin/miner." >> release-notes.md
        fi
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: miner-${{ steps.release_notes.outputs.short_sha }}
        name: miner build ${{ steps.release_notes.outputs.short_sha }}
        body_path: release-notes.md
        files: release-assets/*
        draft: false
        prerelease: true
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}